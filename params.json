{"name":"Yamop for Laravel 4","tagline":"Yet another MongoDB ODM for PHP as Laravel Component","body":"- [What's that?](#whatsthat)\r\n- [Requirements](#requirements)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Pagination](#pagination)\r\n- [Authentication](#authentication)\r\n- [Issues](#Issues)\r\n- [License](#license)\r\n\r\n<a name=\"whatsthat\"></a>\r\n## What's that? \r\nThis is yet another, open source, and very simple [MongoDB](http://www.mongodb.org/) ODM for [Laravel 4](http://www.laravel.com/).\r\nIt works like the standard MongoDB PHP extension interface but returns objects instead of arrays (as ODM). Queries stay the same.\r\nOne of its coolest features are joins which allow you to query for related objects.\r\nThis version for Laravel is based on [Yamop](https://github.com/mawelous/yamop) which can be included into any PHP project. In addition to the standard features it supports Laravel based authentication.\r\n\r\n<a name=\"requirements\"></a>\r\n## Requirements\r\n+ PHP 5.3+\r\n+ PHP MongoDB Extension\r\n+ Laravel 4\r\n\r\n<a name=\"installation\"></a>\r\n## Installation \r\n\r\nYou can simply download it [here](https://github.com/mawelous/yamop-laravel) or use [Composer](http://getcomposer.org/).\r\n\r\nIn the `require` key inside the `composer.json` file add the following\r\n\r\n```yml\r\n    \"mawelous/yamop-laravel\": \"dev-master\"\r\n```\r\n\r\nSave it and run the Composer update command\r\n\r\n    $ composer update\r\n\r\nAfter this is done, add `mongo` in your database configuration:\r\n\r\n```php\r\n    'mongo' => array(\r\n        'host'     => 'host',\r\n        'port'     => 37847,\r\n        'database' => 'db',\r\n        'user'     => 'user',\r\n        'password' => 'pass'\r\n    ),\r\n```\r\n\r\nNow we need to let Laravel know about this new service provider. To do so add under `providers` in the `config\\app.php` file the following:\r\n\r\n```php\r\n    ...\r\n    'Illuminate\\View\\ViewServiceProvider',\r\n    'Illuminate\\Workbench\\WorkbenchServiceProvider',\r\n    ...\r\n    'Mawelous\\YamopLaravel\\YamopLaravelServiceProvider',\r\n```\r\n\r\nAliases to the Yamop classes are useful. Add them in the `aliases` array in the `config\\app.php` file:\r\n\r\n```php\r\n    ...\r\n    'Validator'       => 'Illuminate\\Support\\Facades\\Validator',\r\n    'View'            => 'Illuminate\\Support\\Facades\\View',\r\n    ...\r\n    'Mapper'          => 'Mawelous\\YamopLaravel\\Mapper',\r\n    'Model'           => 'Mawelous\\YamopLaravel\\Model',\r\n```\r\n\r\nTo use Yamop you now just need to extend the Yamop alias `Model` from within any of your new or existing models:\r\n\r\n```php\r\n    class Article extends Model\r\n    {\r\n        protected static $_collectionName = 'articles';\r\n    }\r\n```\r\n\r\nThat's it!\r\n\r\n<a name=\"usage\"></a>\r\n## Usage\r\nFor usage examples and further explanation take a look at the [Yamop Documentation](https://github.com/mawelous/yamop#usage). In this release for Laravel you can also use aliases for `Mapper` and `Model` which were registered during installation. See the following pagination example.\r\n\r\n<a name=\"pagination\"></a>\r\n## Pagination\r\n\r\nYamop for Laravel supports pagination out of the box. Yamop implements the `_createPaginator` method and extends `getPaginator`, with this you only need to pass the items per page into the method. The second parameter, the current page number, is optional.\r\n\r\n```php\r\n    User::getMapper()\r\n        ->find( 'status' => [ '$ne' => User::STATUS_DELETED ] ) )\r\n        ->sort( [ $field => $direction ] )\r\n        ->getPaginator( $perPage );\r\n\r\n    //or\r\n    User::getMapper()\r\n        ->find()\r\n        ->getPaginator( $perPage, $currentPage );\r\n```\r\n\r\n<a name=\"authentication\"></a>\r\n## Authentication\r\n\r\nLaravel's package of Yamop supports native like authentication.\r\nYou must first extend your `User` Model with Yamop's `Mawelous\\YampoLaravel\\User`\r\n\r\n```php\r\n    class User extends Mawelous\\YamopLaravel\\User\r\n    {\r\n        protected static $_collectionName = 'users';    \r\n    }\r\n```\r\n\r\nIn `auth\\config.php` change the driver to `yamop`.\r\n\r\n```php\r\n    ...\r\n    'driver' => 'yamop',\r\n    ...\r\n```\r\n\r\nNow you can implement it as standard authentication:\r\n\r\n```php\r\n    class AuthController extends BaseController {\r\n    \r\n        public function getLogin()\r\n        {\r\n            return View::make( 'auth.login' );\r\n        }\r\n        \r\n        public function postLogin()\r\n        {\r\n            if( Auth::attempt( [ 'nickname' => Input::get( 'nickname' ), 'password' => input::get( 'password' ) ] ) )\r\n            {\r\n                return Redirect::intended( 'dashboard' );\r\n            } else {\r\n                return Redirect::to( '/login' )->with( 'login_failed', true );\r\n            }       \r\n        }\r\n    }\r\n```\r\n\r\n<a name=\"issues\"></a>\r\n## Issues\r\n\r\nAny issues or questions please [report here](https://github.com/Mawelous/yamop-laravel/issues)\r\n\r\n<a name=\"license\"></a>\r\n## License\r\n\r\nYamop is free software distributed under the terms of the [MIT license](http://opensource.org/licenses/MIT)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}